specificationVersion: 'jobtemplate-2023-09'
name: Default KeyShot Job Template
parameterDefinitions:
- name: KeyShotFile
  type: PATH
  objectType: FILE
  dataFlow: IN
  userInterface:
    control: CHOOSE_INPUT_FILE
    label: KeyShot Package File
    groupLabel: KeyShot Settings
    fileFilters:
    - label: KeyShot Package files
      patterns:
      - '*.ksp'
      - '*.bip'
    - label: All Files
      patterns:
      - '*'
  description: The KeyShot package file to render.
- name: Frames
  type: STRING
  userInterface:
    control: LINE_EDIT
    label: Frames
    groupLabel: KeyShot Settings
  description: The frames to render. E.g. 1-3,8,11-15
  minLength: 1
- name: OutputFilePath
  type: PATH
  objectType: FILE
  dataFlow: OUT
  userInterface:
    control: CHOOSE_INPUT_FILE
    label: Output File Path
    groupLabel: KeyShot Settings
  description: The render output path.
- name: OutputFormat
  type: STRING
  description: The render output format
  allowedValues: 
    [
      "RENDER_OUTPUT_PNG",
      "RENDER_OUTPUT_JPEG",
      "RENDER_OUTPUT_EXR",
      "RENDER_OUTPUT_TIFF8",
      "RENDER_OUTPUT_TIFF32",
      "RENDER_OUTPUT_PSD8",
      "RENDER_OUTPUT_PSD16",
      "RENDER_OUTPUT_PSD32"
    ]
  default: RENDER_OUTPUT_PNG
  userInterface:
    control: DROPDOWN_LIST
    label: Output Format(Must match file extension)
    groupLabel: KeyShot Settings
steps:
- name: RenderCommand
  parameterSpace:
    taskParameterDefinitions:
    - name: Frame
      type: INT
      range: "{{Param.Frames}}"
  stepEnvironments:
  - name: KeyShot
    variables:
      OUTPUT_PATH: ""
  script:
    actions:
      onRun:
        command: powershell
        args: ["-File", "{{Task.File.Run}}"]
    embeddedFiles:
      - name: headlessScript
        filename: headlessScript.py
        type: TEXT
        data: |
          opts = lux.getRenderOptions()
          opts.setAddToQueue(False)
          frame = int("{{Task.Param.Frame}}")
          lux.setAnimationFrame(frame)
          output_path = r"{{Param.OutputFilePath}}"
          output_path = output_path.replace("%d", str(frame))
          output_format_code = lux.{{Param.OutputFormat}}
          print("Output Path: %s" % output_path)
          print("Output Format: %s" % output_format_code)
          lux.renderImage(path=output_path, opts=opts, format=output_format_code)
          exit()
      - name: Run
        runnable: true
        filename: run.ps1
        type: TEXT
        data: |
          # Licensing should be configured using a floating license server specified
          # by setting the environment variable LUXION_LICENSE_FILE=<PORT>:<ADDRESS>
          keyshot_headless -progress -floating_feature keyshot2 '{{Param.KeyShotFile}}' -script '{{Task.File.headlessScript}}'
